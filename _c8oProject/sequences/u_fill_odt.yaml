comment: |
  Fills an ODT template file (Universal).
  Place your template files in .//templates/odf folder.
  It will output an attachment structure and if you call it with .bin requester it will trigger a download in the client Browser.
responseTimeout: 120
↓jIf [steps.IfStep-1742483763946]: 
  condition: java.lang.System.getenv("CONVERTIGO_VERSION") != null && context.server.get("init_config") != "done"
  ↓Error_structure [steps.XMLErrorStep-1742483932829]: 
    code: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.steps.SmartType
        - SmartType: 
          - ↑mode: PLAIN
          - →→: '-4'
    details: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.steps.SmartType
        - SmartType: 
          - ↑mode: PLAIN
          - →→: Server Font configuration is not finished yet. Please retry later...
    message: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.steps.SmartType
        - SmartType: 
          - ↑mode: PLAIN
          - →→: Font initialization not done.
  ↓Return [steps.ReturnStep-1742483919219]: 
↓inputVars [steps.InputVariablesStep-1739978901433]: 
↓IfExistThenElse [steps.IfExistThenElseStep-1740072516876]: 
  sourceDefinition: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
      - com.twinsoft.convertigo.beans.common.XMLVector: 
        - java.lang.String: 
          - ↑value: 1739978901433
        - java.lang.String: 
          - ↑value: ./markers/array
  ↓jThen [steps.ThenStep-1740072516879]: 
    ↓markers [steps.JsonSourceStep-1739978922911]: 
      sourceDefinition: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
          - com.twinsoft.convertigo.beans.common.XMLVector: 
            - java.lang.String: 
              - ↑value: 1739978901433
            - java.lang.String: 
              - ↑value: ./markers/array
      variableName: o_markers
  ↓jElse [steps.ElseStep-1740072516885]: 
    ↓markers [steps.JsonSourceStep-1740072550821]: 
      sourceDefinition: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
          - com.twinsoft.convertigo.beans.common.XMLVector: 
            - java.lang.String: 
              - ↑value: 1739978901433
            - java.lang.String: 
              - ↑value: ./markers/text()
      variableName: o_markers
↓fill_template [steps.SimpleStep-1739960996675]: 
  expression: |
    'var odf_api = JavaImporter(
    	Packages.org.odftoolkit.simple.TextDocument,
    	Packages.org.odftoolkit.simple.common.navigation.TextNavigation,
    	org.odftoolkit.simple.text.Span,
    	Packages.org.odftoolkit.simple.draw.Image,	
    	Packages.org.odftoolkit.simple.table.Table,
    	Packages.org.odftoolkit.simple.table.Cell,	
    	Packages.org.odftoolkit.simple.style.Font,
    	Packages.org.odftoolkit.simple.style.StyleTypeDefinitions,
    	Packages.org.odftoolkit.odfdom.type.Color,
    	Packages.java.io.File
    );
    
    function get_file_name(file_path){
    	if(file_path != ""){
    		return org.apache.commons.io.FilenameUtils.getName(get_full_path(file_path));
    	}
    }
    
    function get_full_path(file_path){
    	if(file_path != ""){
    		project_directory_path = context.getProjectDirectory().replace("\\", "/") + "/";
     		if(file_path.indexOf(".//") != -1){
      			file_path = project_directory_path + file_path.substring(3);
    		}
     		else if(file_path.indexOf("./") != -1){
      			file_path = project_directory_path + "../" + file_path.substring(3);;
    		}
    	}
    	return file_path;
    }
    
    var template_path = get_full_path(input_filename);
    var output_path = get_full_path(output_filename);
    var file_name = get_file_name(output_filename);
    
    with(odf_api){
    	
    	function setTextFont(style){
    		try {
    			if((typeof style) == "string"){
    				style = JSON.parse(style);
    			}
    			return new Font(style.fontName, StyleTypeDefinitions.FontStyle[style.fontStyle], style.fontSize, Color[style.fontColor]);
    		} catch(e){
    			log.warn("Error setting Font: " + e);
    			return new Font("Arial", StyleTypeDefinitions.FontStyle.REGULAR, 10, Color.BLACK);
    		}
    	}
    	
    	function replace_text(fdoc, tags){
    		var default_font = setTextFont({fontName: "Arial", fontStyle: "REGULAR", fontSize: 10, fontColor: "BLACK"});
    		for (var i=0; i<tags.length; i++){
    			log.debug("tag: " + tags[i].tag);
    			log.debug("tag type: " + tags[i].type);
    			log.debug("tag value: " + tags[i].value);
    			var txt_nav = null;
    			txt_nav = new TextNavigation(java.util.regex.Pattern.quote(tags[i].tag), fdoc);
    			while (txt_nav.hasNext()) {
    				item = txt_nav.nextSelection();
    				log.debug("item Text: " + item.getText());
    				log.debug("item Index: " + item.getIndex());
    				switch (tags[i].type){
    					case "image":
    						item.replaceWith(new File(get_full_path(tags[i].value)).toURI());
    						break;
    					case "table":
    					case "tableh":
    						var values = tags[i].value;
    						var rows = values.length;
    						var cols = values[0].length;
    						var hasRowHeader = tags[i].type == "tableh";
    						log.debug("Rows: " + rows);
    						log.debug("Cols: " + cols);
    						log.debug("Has row header? " + hasRowHeader);
    						if(rows>0 && cols>0){
    							table1 = Table.newTable(fdoc, rows, cols);
    							table1.setTableName("table1");
    							var font = setTextFont({fontName: "Arial", fontStyle: "BOLD", fontSize: 10, fontColor: "BLACK"});
    							for(var r=0; r<rows; r++){
    								for(var c=0; c<cols; c++){
    									var cell = table1.getCellByPosition(c, r);
    									if(r == 0 && hasRowHeader){
    										cell.setFont(font);
    										cell.setHorizontalAlignment(StyleTypeDefinitions.HorizontalAlignmentType["CENTER"]);
    										cell.setVerticalAlignment(StyleTypeDefinitions.VerticalAlignmentType["MIDDLE"]);
    										cell.setCellBackgroundColor(Color.valueOf("#e5e5e5"));
    										}else{
    											cell.setFont(default_font);
    									}
    										cell.setStringValue(values[r][c]);
    								}
    							}
    							item.replaceWith(fdoc.getTableByName("table1"));
    							table1.remove();
    						}
    						break;
    					case "span":
    						var span = Span.newSpan(item);
    						var styleHandler = span.getStyleHandler();
    						if(tags[i].style !== undefined){
    							styleHandler.getTextPropertiesForWrite().setFont(setTextFont(tags[i].style));
    						} else {
    							styleHandler.getTextPropertiesForWrite().setFont(default_font);
    						}
    						span.setTextContent(tags[i].value);
    						break;
    					case "paragraph":
    					case "string":
    					default:
    						item.replaceWith(tags[i].value);
    				}
    			}
    		}
    	}
    	
    	var document = TextDocument.loadDocument(template_path);
    	
    	try {
    		if(o_markers != null){
    			replace_text(document, o_markers);
    			document.save(output_path);
    		}
    	} catch (e) {
    		log.warn("ERROR: " + e);
    	}
    }'
↓Element [steps.XMLElementStep-1739960996678]: 
  nodeName: attachment
  ↓jAttribute [steps.AttributeStep-1739960996681]: 
    expression: '"attachment"'
    nodeName: type
  ↓jAttribute1 [steps.AttributeStep-1739960996684]: 
    expression: file_name
    nodeName: name
  ↓jAttribute11 [steps.AttributeStep-1739960996687]: 
    expression: output_path
    nodeName: local-url
  ↓jAttribute2 [steps.AttributeStep-1739960996690]: 
    expression: '"application/octet-stream"'
    nodeName: content-type
↓output_filename [variables.RequestableVariable-1739960996705]: 
  comment: |
    'ODT output file path. 
    Can be an absolute path or a relative Convertigo path: 
    ".//" is relative to the project''s path. 
    "./" is relative to the workspace path.'
  required: true
↓input_filename [variables.RequestableVariable-1739960996708]: 
  comment: |
    'ODT input template file name to fill. 
    Can be an absolute path or a relative Convertigo path: 
    ".//" is relative to the project''s path. 
    "./" is relative to the workspace path.'
  required: true
↓markers [variables.RequestableVariable-1739961089380]: 
  comment: |
    'Structured array as follow : 
    
    [
    	{
    		"tag": "&lt;tag name in template file to replace with ''value'' key&gt;",
    		"type": "&lt;tag type. ''image'' or ''string'' supported&gt;",
    		"value": "&lt;replacement string or image absolute path&gt;"
    	}
    ]>'
↓Test_Case_marker_img [core.TestCase]: 
  ↓output_filename [variables.TestCaseVariable-1739973840643]: 
    required: true
    value: .//outputs/test.odt
  ↓input_filename [variables.TestCaseVariable-1739973840646]: 
    required: true
    value: .//templates/odf/template.odt
  ↓markers [variables.TestCaseVariable-1739973840649]: 
    value: '[ { "tag": "__c8o_date", "type": "string", "value": "February 25, 2025" }, { "tag": "__c8o_objet", "type": "string", "value": "Resignation Letter" }, { "tag": "__c8o_texte", "type": "string", "value": "Dear Sir,\nDear Madam,\nDear Miss" }, { "tag": "__c8o_signature", "type": "image", "value": "C:/Convertigo/Studio 8.3.2/workspace/.metadata/.plugins/com.twinsoft.convertigo.studio/git/c8oprj-lib-odftoolkit_master/templates/sarah_signature_sample.png" } ]'
↓Test_Case_marker_span [core.TestCase]: 
  ↓output_filename [variables.TestCaseVariable-1742552007563]: 
    required: true
    value: .//outputs/test_span.odt
  ↓input_filename [variables.TestCaseVariable-1742552007566]: 
    required: true
    value: .//templates/odf/template.odt
  ↓markers [variables.TestCaseVariable-1742552007569]: 
    value: '[ { "tag": "__c8o_date", "type": "string", "value": "February 25, 2025" }, { "tag": "__c8o_objet", "type": "span", "value": "Resignation Letter", "style": "{\"fontName\": \"Arial\", \"fontStyle\": \"BOLD\", \"fontSize\": \"14\", \"fontColor\": \"RED\"}" }, { "tag": "__c8o_texte", "type": "string", "value": "Dear Sir,\nDear Madam,\nDear Miss" }, { "tag": "__c8o_signature", "type": "image", "value": "C:/Convertigo/Studio 8.3.2/workspace/.metadata/.plugins/com.twinsoft.convertigo.studio/git/c8oprj-lib-odftoolkit_master/templates/sarah_signature_sample.png" } ]'
↓Test_Case_marker_string [core.TestCase]: 
  ↓output_filename [variables.TestCaseVariable-1742291459033]: 
    required: true
    value: .//outputs/test_span.odt
  ↓input_filename [variables.TestCaseVariable-1742291459036]: 
    required: true
    value: .//templates/odf/template.odt
  ↓markers [variables.TestCaseVariable-1742291459039]: 
    value: '[ { "tag": "__c8o_date", "type": "string", "value": "February 25, 2025" }, { "tag": "__c8o_objet", "type": "string", "value": "Resignation Letter" }, { "tag": "__c8o_texte", "type": "string", "value": "Dear Sir,\nDear Madam,\nDear Miss" }, { "tag": "__c8o_signature", "type": "image", "value": "C:/Convertigo/Studio 8.3.2/workspace/.metadata/.plugins/com.twinsoft.convertigo.studio/git/c8oprj-lib-odftoolkit_master/templates/sarah_signature_sample.png" } ]'
↓Test_Case_marker_table [core.TestCase]: 
  ↓output_filename [variables.TestCaseVariable-1740505823647]: 
    required: true
    value: .//outputs/test_ens.odt
  ↓input_filename [variables.TestCaseVariable-1740505823650]: 
    required: true
    value: .//templates/odf/template_certificat_ens.odt
  ↓markers [variables.TestCaseVariable-1740505823653]: 
    value: '[ { "tag": "{date_reception_ens}", "type": "string", "value": "25 Février 2025" }, { "tag": "{ref_usager}", "type": "string", "value": "#123-456" }, { "tag": "{nom_commune}", "type": "string", "value": "Boissy-Sous-Saint-Yon" }, { "tag": "{tableau_ens}", "type": "tableh", "value": [["Section", "Numéro de parcelle", "Est situé en zone de préemption ENS", "N''est pas situé en zone de préemption ENS", "Est partiellement situé en zone de préemption ENS", "Parcelle inconnue"], ["Section01", "Parcelle01", "oui", "oui", "oui", "oui"], ["Section02", "Parcelle01", "non", "non", "non", "non"], ["Section03", "Parcelle03", "non", "non", "non", "non"], ["Section04", "Parcelle04", "non", "non", "non", "non"]] }, { "tag": "{signature_ens}", "type": "image", "value": ".//templates/sarah_signature_sample.png" } ]'