comment: Convert an ODT file to a PDF file
‚Üìexport [steps.SimpleStep-1743693982367]: 
  expression: |
    'var odf_api = JavaImporter(
    	org.odftoolkit.odfdom.converter.pdf.PdfConverter,
    	org.odftoolkit.odfdom.converter.pdf.PdfOptions,
    	com.lowagie.text.FontFactory,
    	org.odftoolkit.odfdom.doc.OdfTextDocument,
    	java.io.File,
    	java.io.FileOutputStream/*,
    	org.apache.fontbox.ttf.TTFParser,
    	org.apache.pdfbox.io.RandomAccessReadBuffer,
    	java.nio.file.Paths,
    	java.nio.file.Files,
    	java.util.Arrays*/
    );
    
    var _error = false;
    var _error_code = "-1";
    var _error_msg = "";
    var _error_stack = "";
    
    function get_file_name(file_path){
    	if(file_path != ""){
    		return org.apache.commons.io.FilenameUtils.getName(get_full_path(file_path));
    	}
    }
    
    function get_full_path(file_path){
    	if(file_path != ""){
    		project_directory_path = context.getProjectDirectory().replace("\\", "/") + "/";
     		if(file_path.indexOf(".//") != -1){
      			file_path = project_directory_path + file_path.substring(3);
    		}
     		else if(file_path.indexOf("./") != -1){
      			file_path = project_directory_path + "../" + file_path.substring(2);
    		}
    	}
    	return file_path;
    }
    
    var input_path = get_full_path(input_filename);
    var output_path = get_full_path(output_filename);
    var file_name = get_file_name(output_filename);
    
    with(odf_api){
    	var output = null;
    	var odt = null;
    	
    	function registerAllFontsInFolder(folderPath){
    	    var fontDir = new File(get_full_path(folderPath));
    	    if (!fontDir.exists() || !fontDir.isDirectory()) {
    	        log.warn("‚ö†Ô∏è Folder does not exist or is invalid: " + get_full_path(folderPath));
    	        return;
    	    }
    	
    	    var files = fontDir.listFiles();
    	    for (var i = 0; i < files.length; i++) {
    	        var f = files[i];
    	        if (f.isFile()) {
    	            var name = f.getName().toLowerCase();
    	            if (name.endsWith(".ttf") || name.endsWith(".otf")) {
    					// Aliases based on TTFParser:
                		/*var ttf = null;
                		try {
    		                var path = Paths.get(f.getAbsolutePath());
    		                var bytes = Files.readAllBytes(path);
    		                var buffer = new RandomAccessReadBuffer(bytes);
    		                var parser = new TTFParser();
    		                var ttf = parser.parse(buffer);
    		                var nameTable = ttf.getNameTable();
    		                var records = nameTable.getNameRecords();
    		                var alias = null;
    		
    		                // Parcours des enregistrements pour trouver "Full font name" (Name ID = 4)
    		                for (var j = 0; j < records.length; j++) {
    		                    var rec = records[j];
    		                    if (rec.getNameId() == 4) {
    		                        alias = rec.getString();
    		                        break;
    		                    }
    		                }
    		
    		                // Fallback si non trouv√©
    		                if (!alias) alias = ttf.getName();
    		
    		                FontFactory.register(f.getAbsolutePath(), alias);
    		                log.debug("‚úÖ Registered Font: ''" + alias + "'' from: " + f.getName());
    		            } catch (e) {
    		                log.warn("‚ö†Ô∏è Erreur lors de l‚Äôanalyse de ''" + f.getName() + "'' ‚Üí " + e);
    		            } finally {
    		                if (ttf) ttf.close();
    		            }*/
    		            //aliases based on file name:
    		            var fontAlias = (""+f.getName()).replace(".ttf", "").replace(/[_\-]/g, " ");
                		FontFactory.register(f.getAbsolutePath(), fontAlias);
                		log.debug("‚úÖ Registered Font: ''" + fontAlias + "'' from: " + f.getAbsolutePath());
    	            }
    	        }
    	    }
    	    /*var allFonts = FontFactory.getRegisteredFonts().toArray();
    		Arrays.sort(allFonts);
    		for (var i = 0; i < allFonts.length; i++) {
    		    log.warn("üìö Registered Font : " + allFonts[i]);
    		}*/
    	}
    	
    	try {
    		// Charger le fichier .odt
    		odt = OdfTextDocument.loadDocument(input_path);
    		
    		// Options pour la conversion PDF
    		var options = PdfOptions.create();
    
    		// Enregistre la font depuis son fichier .ttf
    		if(fonts_folder != null && fonts_folder != ""){
    			registerAllFontsInFolder(fonts_folder);
    		} else if(font_paths != null && font_paths != "" && font_aliases != null && font_aliases != ""){
    			if (font_paths.length !== font_aliases.length) {
    		        log.warn("‚ö†Ô∏è Font arrays length mismatch!");
    		    } else {
    			    for (var i = 0; i < font_paths.length; i++) {
    			        FontFactory.register(get_full_path(font_paths[i]), font_aliases[i]);
    			        log.debug("‚úÖ Registered Font: ''" + font_aliases[i] + "'' from: " + font_paths[i]);
    			    }
    		    }
    		}
    		
    		
    		output = new FileOutputStream(new File(output_path));
    		
    		// Convertir en PDF
    		PdfConverter.getInstance().convert(odt, output, options);
    		log.debug("Conversion termin√©e !");
    	} catch (e) {
    		log.error("Erreur lors de la conversion : " + e);
    		_error = true;
    		_error_code = "-1";
    		_error_msg = "ERROR: converting file ''" + input_path + "''";
    		_error_stack = "" + e;
    	} finally {
    		if(output) output.close();
    		if(odt) odt.close();
    	}
    }'
‚ÜìjIf [steps.IfStep-1743757560930]: 
  condition: _error == true
  ‚ÜìError_structure [steps.XMLErrorStep-1743757560933]: 
    code: 
      - xmlizable: 
        - ‚Üëclassname: com.twinsoft.convertigo.beans.steps.SmartType
        - SmartType: 
          - ‚Üëmode: JS
          - ‚Üí‚Üí: _error_code
    details: 
      - xmlizable: 
        - ‚Üëclassname: com.twinsoft.convertigo.beans.steps.SmartType
        - SmartType: 
          - ‚Üëmode: JS
          - ‚Üí‚Üí: _error_stack
    message: 
      - xmlizable: 
        - ‚Üëclassname: com.twinsoft.convertigo.beans.steps.SmartType
        - SmartType: 
          - ‚Üëmode: JS
          - ‚Üí‚Üí: _error_msg
  ‚ÜìReturn [steps.ReturnStep-1743757560936]: 
‚ÜìElement [steps.XMLElementStep-1743757603703]: 
  nodeName: attachment
  ‚ÜìjAttribute [steps.AttributeStep-1743757603706]: 
    expression: '"attachment"'
    nodeName: type
  ‚ÜìjAttribute1 [steps.AttributeStep-1743757603709]: 
    expression: file_name
    nodeName: name
  ‚ÜìjAttribute11 [steps.AttributeStep-1743757603712]: 
    expression: output_path
    nodeName: local-url
  ‚ÜìjAttribute2 [steps.AttributeStep-1743757603715]: 
    expression: '"application/octet-stream"'
    nodeName: content-type
‚Üìinput_filename [variables.RequestableVariable-1743695655398]: 
  comment: |
    'ODT input file name to convert. 
    Can be an absolute path or a relative Convertigo path: 
    ".//" is relative to the project''s path. 
    "./" is relative to the workspace path.'
  required: true
‚Üìoutput_filename [variables.RequestableVariable-1743695661334]: 
  comment: |
    'PDF output file path. 
    Can be an absolute path or a relative Convertigo path: 
    ".//" is relative to the project''s path. 
    "./" is relative to the workspace path.'
  required: true
‚Üìfonts_folder [variables.RequestableVariable-1753172873995]: 
  comment: Folder absolute path containing the Fonts to register. Font name alias computed from file name. Use font_paths and font_aliases to manually declare fonts instead.
‚Üìfont_paths [variables.RequestableMultiValuedVariable-1753194607177]: 
  comment: Font absolute paths to register.
‚Üìfont_aliases [variables.RequestableMultiValuedVariable-1753194616403]: 
  comment: Font aliases according to font_paths values.
‚ÜìTest_Case [core.TestCase]: 
  ‚Üìinput_filename [variables.TestCaseVariable-1743695670342]: 
    required: true
    value: .//templates/odf/test_pdf_convert.odt
  ‚Üìoutput_filename [variables.TestCaseVariable-1743695670344]: 
    required: true
    value: .//outputs/export_odt.pdf
  ‚Üìfonts_folder [variables.TestCaseVariable-1753197453794]: 
  ‚Üìfont_paths [variables.TestCaseMultiValuedVariable-1753197453796]: 
    value: 
      - xmlizable: 
        - ‚Üëclassname: com.twinsoft.convertigo.beans.common.XMLVector
        - com.twinsoft.convertigo.beans.common.XMLVector: 
          - java.lang.String: 
            - ‚Üëvalue: .//fonts/magneto.ttf
          - java.lang.String: 
            - ‚Üëvalue: .//fonts/Jokerman.otf
          - java.lang.String: 
            - ‚Üëvalue: .//fonts/edwardian_script_itc.ttf
  ‚Üìfont_aliases [variables.TestCaseMultiValuedVariable-1753197453798]: 
    value: 
      - xmlizable: 
        - ‚Üëclassname: com.twinsoft.convertigo.beans.common.XMLVector
        - com.twinsoft.convertigo.beans.common.XMLVector: 
          - java.lang.String: 
            - ‚Üëvalue: Magneto
          - java.lang.String: 
            - ‚Üëvalue: Jokerman
          - java.lang.String: 
            - ‚Üëvalue: Edwardian Script ITC